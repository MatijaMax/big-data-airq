version: '2' 

services:

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop/hadoop.env
    ports:
      - 9870:9870
      - 9000:9000
    networks:
      - airq_network
    

  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    depends_on: 
      - namenode
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    env_file:
      - ./hadoop/hadoop.env
    networks:
      - airq_network

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    depends_on: 
      - namenode
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data
    env_file:
      - ./hadoop/hadoop.env
    networks:
      - airq_network
  
  hue:
    image: gethue/hue:20201111-135001
    hostname: hue
    container_name: hue
    dns: 8.8.8.8
    ports:
      - "8888:8888"
    volumes:
      - ./hue/conf.dist:/usr/share/hue/desktop/conf
    depends_on: 
      - namenode
    networks:
      - airq_network

  nifi:
    image: apache/nifi:1.15.3
    container_name: nifi
    ports:
      - "8443:8443"
    volumes:
      - ./data/:/tmp/data/
      - ./nifi/hadoop/core-site.xml:/home/nifi/core-site.xml
      - nifi_conf:/opt/nifi/nifi-current/conf
      - nifi_database_repository:/opt/nifi/nifi-current/database_repository
      - nifi_flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - nifi_content_repository:/opt/nifi/nifi-current/content_repository
      - nifi_provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - nifi_state:/opt/nifi/nifi-current/state
    env_file:
      - ./nifi/nifi.env
    networks:
      - airq_network

  nifi-registry:
    image: apache/nifi-registry:1.15.3
    container_name: nifi-registry
    ports:
      - "18080:18080"
    volumes:
      - nifi_registry:/opt/nifi-registry/nifi-registry-current/
    networks:
      - airq_network

  spark-master:
    build:        
      dockerfile: spark/docker/master/Dockerfile  
    container_name: spark-master
    ports:
      - 8080:8080
      - 7077:7077
    environment: 
      - PYSPARK_PYTHON=python3
    env_file:
      - ./spark/spark.env
    volumes: 
      - ./spark/scripts:/home/scripts
    networks:
      - airq_network
      
  spark-worker1:
    build:       
      dockerfile: spark/docker/worker/Dockerfile
    container_name: spark-worker1
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077    
    ports:
      - 8081:8081
    env_file:
      - ./spark/spark.env      
    networks:
      - airq_network
  
  spark-worker2:
    build:         
      dockerfile: spark/docker/worker/Dockerfile
    container_name: spark-worker2
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    ports:
      - 8082:8081
    env_file:
      - ./spark/spark.env   
    networks:
      - airq_network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - airq_network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    depends_on:
      - mongodb
    ports:
      - "8083:8081"
    env_file:
      - ./mongo/mongo.env    
    networks:
      - airq_network

  metabase:
    image: metabase/metabase:v0.53.x
    container_name: metabase
    depends_on:
      - mongodb
    ports:
      - "3000:3000"
    volumes:
      - ./metabase/mb_data:/metabase-data
    env_file:
      - ./metabase/metabase.env
    networks:
      - airq_network     

  postgres:
    image: postgres:9.6
    container_name: postgres
    volumes: 
        - ./airflow/postgres:/docker-entrypoint-initdb.d
    environment:
        - POSTGRES_USER=airflow
        - POSTGRES_PASSWORD=airflow
        - POSTGRES_DB=airflow
    ports:
        - "5432:5432"
    restart: always           
    networks:
      - airq_network    
       
  airflow:
    image: docker-airflow-spark:1.10.7_3.0.1
    container_name: airflow
    user: root
    depends_on:
      - spark-master
      - postgres
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
      - FERNET_KEY=wKU4DB8b8jfpqIqcTSGSyR6dWtCtF16PUVAOlviItYw=
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    logging:
      options:
        max-size: 10m
        max-file: "3"
    volumes:
      - ./airflow/dags:/root/airflow/dags # DAG folder
      - ./spark/scripts:/home/scripts # Spark Scripts (Must be the same path in airflow and Spark Cluster)
      - ./spark/resources:/usr/local/spark/resources # Resources folder (Must be the same path in airflow and Spark Cluster)
    ports:
      - "8282:8080"
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - airq_network   

volumes:
  mongodb_data: {}
  hadoop_namenode: {}
  hadoop_datanode1: {}
  hadoop_datanode2: {}
  nifi_conf: {}
  nifi_database_repository: {}
  nifi_flowfile_repository: {}
  nifi_content_repository: {}
  nifi_provenance_repository: {}
  nifi_state: {}
  nifi_registry: {}
  postgres_data: {}


networks:
  airq_network:
    driver: bridge